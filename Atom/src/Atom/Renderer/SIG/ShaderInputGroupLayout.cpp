#include "atompch.h"
#include "ShaderInputGroupLayout.h"

#include "Atom/Core/DirectX12/DirectX12Utils.h"
#include "Atom/Renderer/Device.h"

namespace Atom
{
    // -----------------------------------------------------------------------------------------------------------------------------
    ShaderInputGroupLayout::ShaderInputGroupLayout(const Vector<const ShaderInputGroupBindPoint*>& bindPoints, const Vector<const ShaderInputGroupStaticSampler*>& staticSamplers)
        : m_BindPoints(bindPoints), m_StaticSamplers(staticSamplers)
    {
        // !!! Root signature here must match the one in the autogenerated hlsli file for the layout !!!

        Vector<D3D12_ROOT_PARAMETER1> rootParams;
        Vector<D3D12_STATIC_SAMPLER_DESC> staticSamplerDescs;

        Vector<Vector<D3D12_DESCRIPTOR_RANGE1>> resourceRangesPerBindPoint;
        resourceRangesPerBindPoint.resize(bindPoints.size());

        Vector<D3D12_DESCRIPTOR_RANGE1> samplerRangesPerBindPoint;
        samplerRangesPerBindPoint.resize(bindPoints.size());

        for (u32 i = 0; i < m_BindPoints.size(); i++)
        {
            const ShaderInputGroupBindPoint* bp = m_BindPoints[i];

            // Resource table
            if (bp->GetConstantBufferRootIdx() != UINT32_MAX)
            {
                D3D12_ROOT_PARAMETER1& cbParam = rootParams.emplace_back();
                cbParam.ParameterType = D3D12_ROOT_PARAMETER_TYPE_CBV;
                cbParam.ShaderVisibility = D3D12_SHADER_VISIBILITY_ALL;
                cbParam.Descriptor.RegisterSpace = bp->GetBindingIndex();
                cbParam.Descriptor.ShaderRegister = 0;
                cbParam.Descriptor.Flags = D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE;
            }

            if (bp->GetNumSRVs() > 0)
            {
                D3D12_DESCRIPTOR_RANGE1& range = resourceRangesPerBindPoint[i].emplace_back();
                range.RangeType = D3D12_DESCRIPTOR_RANGE_TYPE_SRV;
                range.RegisterSpace = bp->GetBindingIndex();
                range.BaseShaderRegister = 0;
                range.NumDescriptors = bp->GetNumSRVs();
                range.Flags = D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
                range.OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;
            }

            if (bp->GetNumUAVs() > 0)
            {
                D3D12_DESCRIPTOR_RANGE1& range = resourceRangesPerBindPoint[i].emplace_back();
                range.RangeType = D3D12_DESCRIPTOR_RANGE_TYPE_UAV;
                range.RegisterSpace = bp->GetBindingIndex();
                range.BaseShaderRegister = 0;
                range.NumDescriptors = bp->GetNumUAVs();
                range.Flags = D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
                range.OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;
            }

            if (!resourceRangesPerBindPoint[i].empty())
            {
                D3D12_ROOT_PARAMETER1& resourceTableParam = rootParams.emplace_back();
                resourceTableParam.ParameterType = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;
                resourceTableParam.ShaderVisibility = D3D12_SHADER_VISIBILITY_ALL;
                resourceTableParam.DescriptorTable.NumDescriptorRanges = resourceRangesPerBindPoint[i].size();
                resourceTableParam.DescriptorTable.pDescriptorRanges = resourceRangesPerBindPoint[i].data();
            }

            // Sampler table
            if (bp->GetNumSamplers() > 0)
            {
                D3D12_DESCRIPTOR_RANGE1& range = samplerRangesPerBindPoint[i];
                range.RangeType = D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER;
                range.RegisterSpace = bp->GetBindingIndex();
                range.BaseShaderRegister = 0;
                range.NumDescriptors = bp->GetNumSamplers();
                range.Flags = D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
                range.OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;

                D3D12_ROOT_PARAMETER1& samplerTableParam = rootParams.emplace_back();
                samplerTableParam.ParameterType = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;
                samplerTableParam.ShaderVisibility = D3D12_SHADER_VISIBILITY_ALL;
                samplerTableParam.DescriptorTable.NumDescriptorRanges = 1;
                samplerTableParam.DescriptorTable.pDescriptorRanges = &range;
            }
        }

        for (u32 i = 0; i < m_StaticSamplers.size(); i++)
        {
            const ShaderInputGroupStaticSampler* sampler = m_StaticSamplers[i];

            D3D12_STATIC_SAMPLER_DESC& staticSamplerDesc = staticSamplerDescs.emplace_back();
            staticSamplerDesc.Filter = Utils::AtomTextureFilterToD3D12(sampler->GetFilter());
            staticSamplerDesc.AddressU = Utils::AtomTextureWrapToD3D12(sampler->GetWrap());
            staticSamplerDesc.AddressV = Utils::AtomTextureWrapToD3D12(sampler->GetWrap());
            staticSamplerDesc.AddressW = Utils::AtomTextureWrapToD3D12(sampler->GetWrap());
            staticSamplerDesc.MaxAnisotropy = sampler->GetFilter() == TextureFilter::Anisotropic ? D3D12_REQ_MAXANISOTROPY : 1;
            staticSamplerDesc.ComparisonFunc = D3D12_COMPARISON_FUNC_LESS_EQUAL;
            staticSamplerDesc.BorderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE;
            staticSamplerDesc.MipLODBias = 0.0f;
            staticSamplerDesc.MinLOD = 0.0f;
            staticSamplerDesc.MaxLOD = D3D12_FLOAT32_MAX;

            staticSamplerDesc.ShaderRegister = i;
            staticSamplerDesc.RegisterSpace = sampler->GetShaderSpace();
            staticSamplerDesc.ShaderVisibility = D3D12_SHADER_VISIBILITY_ALL;
        }

        // Create root signature
        auto d3dDevice = Device::Get().GetD3DDevice();

        D3D12_FEATURE_DATA_ROOT_SIGNATURE featureData = {};
        featureData.HighestVersion = D3D_ROOT_SIGNATURE_VERSION_1_1;

        if (FAILED(d3dDevice->CheckFeatureSupport(D3D12_FEATURE_ROOT_SIGNATURE, &featureData, sizeof(featureData))))
            featureData.HighestVersion = D3D_ROOT_SIGNATURE_VERSION_1_0;

        D3D12_VERSIONED_ROOT_SIGNATURE_DESC rootSignatureDesc = {};
        rootSignatureDesc.Version = D3D_ROOT_SIGNATURE_VERSION_1_1;
        rootSignatureDesc.Desc_1_1.NumParameters = rootParams.size();
        rootSignatureDesc.Desc_1_1.pParameters = rootParams.data();
        rootSignatureDesc.Desc_1_1.NumStaticSamplers = staticSamplerDescs.size();
        rootSignatureDesc.Desc_1_1.pStaticSamplers = staticSamplerDescs.data();
        
        ComPtr<ID3DBlob> signatureBlob = nullptr;
        ComPtr<ID3DBlob> errorBlob = nullptr;

        // Graphics root signature
        {
            rootSignatureDesc.Desc_1_1.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;

            D3DX12SerializeVersionedRootSignature(&rootSignatureDesc, featureData.HighestVersion, &signatureBlob, &errorBlob);
            ATOM_ENGINE_ASSERT(!(errorBlob && errorBlob->GetBufferSize()), (char*)errorBlob->GetBufferPointer());

            DXCall(d3dDevice->CreateRootSignature(0, signatureBlob->GetBufferPointer(), signatureBlob->GetBufferSize(), IID_PPV_ARGS(&m_GraphisRootSignature)));
        }

        // Compute root signature
        {
            rootSignatureDesc.Desc_1_1.Flags = D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS |
                                               D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS | 
                                               D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS |
                                               D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS |
                                               D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS;

            D3DX12SerializeVersionedRootSignature(&rootSignatureDesc, featureData.HighestVersion, &signatureBlob, &errorBlob);
            ATOM_ENGINE_ASSERT(!(errorBlob && errorBlob->GetBufferSize()), (char*)errorBlob->GetBufferPointer());

            DXCall(d3dDevice->CreateRootSignature(0, signatureBlob->GetBufferPointer(), signatureBlob->GetBufferSize(), IID_PPV_ARGS(&m_ComputeRootSignature)));
        }
    }
}
